name: 🚀 Stable APK Builder

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type to create'
        required: false
        default: 'both'
        type: choice
        options:
          - debug
          - release
          - both
      force_clean:
        description: 'Force clean build (ignore cache)'
        required: false
        default: false
        type: boolean

env:
  # Stable versions to ensure reproducible builds
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.4'
  # Build optimization settings
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=false'
  # Network timeout settings
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

jobs:
  # Pre-build validation to catch issues early
  validation:
    name: 🔍 Pre-build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better validation

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Check file permissions
        run: |
          chmod +x gradlew
          ls -la gradlew

      - name: Validate build files
        run: |
          echo "✅ Checking build.gradle files..."
          if [ ! -f "build.gradle" ]; then
            echo "❌ Root build.gradle not found"
            exit 1
          fi
          if [ ! -f "app/build.gradle" ]; then
            echo "❌ App build.gradle not found"
            exit 1
          fi
          echo "✅ All build files present"

      - name: Check source code structure
        run: |
          echo "✅ Validating source code structure..."
          if [ ! -d "app/src/main/java" ] && [ ! -d "app/src/main/kotlin" ]; then
            echo "❌ No source directory found"
            exit 1
          fi
          echo "✅ Source structure valid"

  # Stable build job with comprehensive error handling
  build:
    name: 🏗️ Build APK
    runs-on: ubuntu-latest
    needs: validation
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        build_type: 
          - debug
          - release
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          check-latest: true

      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0

      - name: 🗂️ Cache Gradle dependencies
        uses: actions/cache@v3
        if: ${{ !github.event.inputs.force_clean }}
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧹 Clean workspace (if force clean)
        if: ${{ github.event.inputs.force_clean == 'true' }}
        run: |
          echo "🗑️ Force cleaning workspace..."
          rm -rf ~/.gradle/caches
          rm -rf .gradle
          ./gradlew clean --no-daemon

      - name: 📋 Prepare build environment
        run: |
          echo "📊 System Information:"
          echo "Java version: $(java -version 2>&1 | head -1)"
          echo "Available memory: $(free -h)"
          echo "Available disk space: $(df -h .)"
          echo "CPU cores: $(nproc)"
          
          # Ensure gradlew is executable
          chmod +x gradlew
          
          # Create directories if they don't exist
          mkdir -p app/build/outputs/apk/debug
          mkdir -p app/build/outputs/apk/release

      - name: 🔍 Validate dependencies (with retries)
        run: |
          echo "🔄 Validating dependencies with retry mechanism..."
          for i in {1..3}; do
            echo "Attempt $i/3..."
            if ./gradlew dependencies --no-daemon --stacktrace; then
              echo "✅ Dependencies validated successfully"
              break
            else
              if [ $i -eq 3 ]; then
                echo "❌ Failed to validate dependencies after 3 attempts"
                exit 1
              fi
              echo "⏳ Retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: 🧪 Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          ./gradlew testDebugUnitTest --no-daemon --stacktrace --continue || echo "⚠️ Some tests failed, continuing..."

      - name: 🔨 Build ${{ matrix.build_type }} APK (with retries)
        run: |
          echo "🔨 Building ${{ matrix.build_type }} APK with retry mechanism..."
          for i in {1..3}; do
            echo "Build attempt $i/3..."
            if [ "${{ matrix.build_type }}" == "debug" ]; then
              BUILD_COMMAND="./gradlew assembleDebug --no-daemon --stacktrace"
            else
              BUILD_COMMAND="./gradlew assembleRelease --no-daemon --stacktrace"
            fi
            
            if $BUILD_COMMAND; then
              echo "✅ ${{ matrix.build_type }} APK built successfully"
              break
            else
              if [ $i -eq 3 ]; then
                echo "❌ Failed to build APK after 3 attempts"
                echo "📋 Gradle daemon status:"
                ./gradlew --status || true
                echo "📋 Build scan info:"
                echo "Check the logs above for detailed error information"
                exit 1
              fi
              echo "⏳ Cleaning and retrying in 60 seconds..."
              ./gradlew clean --no-daemon || true
              sleep 60
            fi
          done

      - name: 📊 Collect build information
        id: build_info
        run: |
          echo "📊 Collecting build information..."
          
          # Get version information
          VERSION_NAME=$(grep -o 'versionName "[^"]*' app/build.gradle | sed 's/versionName "//' || echo "1.0.0")
          VERSION_CODE=$(grep -o 'versionCode [0-9]*' app/build.gradle | sed 's/versionCode //' || echo "1")
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_SHA=${GITHUB_SHA:0:7}
          
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          
          echo "📋 Build Info:"
          echo "Version: $VERSION_NAME ($VERSION_CODE)"
          echo "Built at: $BUILD_TIME"
          echo "Commit: $COMMIT_SHA"

      - name: 🏷️ Rename and organize APK files
        run: |
          echo "🏷️ Organizing APK files..."
          
          BUILD_TYPE="${{ matrix.build_type }}"
          VERSION_NAME="${{ steps.build_info.outputs.version_name }}"
          COMMIT_SHA="${{ steps.build_info.outputs.commit_sha }}"
          BUILD_TIME=$(date +%Y%m%d_%H%M)
          
          # Create organized output directory
          mkdir -p organized_outputs
          
          if [ "$BUILD_TYPE" == "debug" ]; then
            APK_PATH="app/build/outputs/apk/debug"
            for apk in $APK_PATH/*.apk; do
              if [ -f "$apk" ]; then
                NEW_NAME="SpadeAce-v${VERSION_NAME}-${BUILD_TIME}-${COMMIT_SHA}-debug.apk"
                cp "$apk" "organized_outputs/$NEW_NAME"
                echo "✅ Created: $NEW_NAME"
                
                # Generate checksums
                cd organized_outputs
                sha256sum "$NEW_NAME" > "${NEW_NAME}.sha256"
                md5sum "$NEW_NAME" > "${NEW_NAME}.md5"
                cd ..
              fi
            done
          else
            APK_PATH="app/build/outputs/apk/release"
            for apk in $APK_PATH/*.apk; do
              if [ -f "$apk" ]; then
                NEW_NAME="SpadeAce-v${VERSION_NAME}-${BUILD_TIME}-${COMMIT_SHA}-release.apk"
                cp "$apk" "organized_outputs/$NEW_NAME"
                echo "✅ Created: $NEW_NAME"
                
                # Generate checksums
                cd organized_outputs
                sha256sum "$NEW_NAME" > "${NEW_NAME}.sha256"
                md5sum "$NEW_NAME" > "${NEW_NAME}.md5"
                cd ..
              fi
            done
          fi

      - name: 🔍 Verify APK integrity
        run: |
          echo "🔍 Verifying APK integrity..."
          for apk in organized_outputs/*.apk; do
            if [ -f "$apk" ]; then
              echo "Checking: $(basename $apk)"
              
              # Check file size
              SIZE=$(stat -f%z "$apk" 2>/dev/null || stat -c%s "$apk" 2>/dev/null || echo "0")
              if [ "$SIZE" -lt 1000000 ]; then # Less than 1MB is suspicious
                echo "⚠️ Warning: APK size is only ${SIZE} bytes"
              else
                echo "✅ APK size: ${SIZE} bytes"
              fi
              
              # Verify it's a valid ZIP file (APKs are ZIP files)
              if file "$apk" | grep -q "Zip archive"; then
                echo "✅ APK is a valid ZIP archive"
              else
                echo "❌ APK is not a valid ZIP archive"
                exit 1
              fi
              
              # Try to list contents
              if unzip -l "$apk" > /dev/null 2>&1; then
                echo "✅ APK structure is valid"
              else
                echo "❌ APK structure is invalid"
                exit 1
              fi
            fi
          done

      - name: 📤 Upload APK artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: SpadeAce-${{ matrix.build_type }}-APK-${{ steps.build_info.outputs.version_name }}
          path: |
            organized_outputs/*.apk
            organized_outputs/*.sha256
            organized_outputs/*.md5
          retention-days: 90
          if-no-files-found: error

      - name: 📊 Upload build reports (on failure)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-reports-${{ matrix.build_type }}-${{ github.run_number }}
          path: |
            app/build/reports/
            app/build/outputs/logs/
          retention-days: 14
          if-no-files-found: ignore

  # Post-build analysis and summary
  summary:
    name: 📋 Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    timeout-minutes: 5

    steps:
      - name: 📊 Generate build summary
        run: |
          echo "# 🚀 Stable APK Builder - Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📅 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          echo "## 🎯 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validation.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Debug | ${{ contains(needs.build.result, 'success') && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Release | ${{ contains(needs.build.result, 'success') && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "## 🎉 Build Successful!" >> $GITHUB_STEP_SUMMARY
            echo "✅ All APKs built successfully and are ready for download." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📦 Available Artifacts:" >> $GITHUB_STEP_SUMMARY
            echo "- Debug APK with checksums" >> $GITHUB_STEP_SUMMARY
            echo "- Release APK with checksums" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "Some jobs failed. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by Stable APK Builder v1.0*" >> $GITHUB_STEP_SUMMARY

  # Notification job (optional, can be customized)
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [validation, build, summary]
    if: always() && github.event_name == 'push'
    timeout-minutes: 2
    
    steps:
      - name: 📢 Build notification
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "🎉 Stable APK Builder completed successfully!"
            echo "✅ All APKs are ready for download from the Actions tab."
          else
            echo "❌ Stable APK Builder failed."
            echo "Please check the build logs for details."
          fi