name: 🔧 Ultra-Stable APK Builder

# This is the most stable and reliable APK builder with comprehensive error handling
# and network diagnostics. It prioritizes stability over speed.

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type of build to create'
        required: false
        default: 'both'
        type: choice
        options:
          - debug
          - release
          - both
      enable_diagnostics:
        description: 'Enable detailed diagnostics'
        required: false
        default: true
        type: boolean

env:
  # Ultra-conservative settings for maximum stability
  JAVA_VERSION: '17'
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false'
  # Disable unnecessary features that might cause issues
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

jobs:
  ultra-stable-build:
    name: 🛡️ Ultra-Stable Build
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: 🔍 System diagnostics
        if: ${{ github.event.inputs.enable_diagnostics == 'true' }}
        run: |
          echo "🔍 System Diagnostics"
          echo "===================="
          echo "OS: $(uname -a)"
          echo "CPU: $(nproc) cores"
          echo "Memory: $(free -h)"
          echo "Disk: $(df -h .)"
          echo "Network interfaces:"
          ip addr show
          echo ""
          echo "🌐 Network Connectivity Tests"
          echo "============================="
          echo "Testing Google DNS..."
          ping -c 3 8.8.8.8 || echo "Failed to reach Google DNS"
          echo ""
          echo "Testing Google repository..."
          nslookup dl.google.com || echo "DNS lookup failed for dl.google.com"
          ping -c 3 dl.google.com || echo "Failed to reach dl.google.com"
          echo ""
          echo "Testing Maven Central..."
          ping -c 3 repo1.maven.org || echo "Failed to reach repo1.maven.org"
          echo ""
          echo "Testing Gradle services..."
          ping -c 3 services.gradle.org || echo "Failed to reach services.gradle.org"
          echo ""

      - name: ☕ Setup JDK with verification
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 🔧 Verify Java installation
        run: |
          echo "☕ Java Verification"
          echo "==================="
          java -version
          javac -version
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"

      - name: 📱 Setup Android SDK (with retries)
        run: |
          echo "📱 Setting up Android SDK..."
          
          # Install Android SDK components with retries
          for i in {1..3}; do
            echo "Attempt $i/3 to install Android SDK..."
            
            # Create Android SDK directory
            mkdir -p $HOME/android-sdk
            cd $HOME/android-sdk
            
            # Download SDK tools with retry
            if wget -q --timeout=30 --tries=3 https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip; then
              echo "✅ Android SDK tools downloaded"
              
              unzip -q commandlinetools-linux-9477386_latest.zip
              mkdir -p cmdline-tools/latest
              mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
              
              # Set environment
              export ANDROID_SDK_ROOT=$HOME/android-sdk
              export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH
              
              # Accept licenses and install platform tools
              yes | sdkmanager --licenses >/dev/null 2>&1 || true
              sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" || true
              
              echo "✅ Android SDK setup completed"
              break
            else
              if [ $i -eq 3 ]; then
                echo "⚠️ Failed to download Android SDK after 3 attempts, trying alternative..."
                # We'll try without Android SDK and rely on system tools
              fi
              echo "⏳ Retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          # Set Android environment variables
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: 🗂️ Setup minimal Gradle cache
        run: |
          echo "🗂️ Setting up Gradle cache..."
          mkdir -p ~/.gradle
          echo "org.gradle.daemon=false" > ~/.gradle/gradle.properties
          echo "org.gradle.parallel=false" >> ~/.gradle/gradle.properties
          echo "org.gradle.configureondemand=false" >> ~/.gradle/gradle.properties

      - name: 🔍 Pre-build validation
        run: |
          echo "🔍 Pre-build Validation"
          echo "======================"
          
          # Check if build files exist
          if [ ! -f "build.gradle" ]; then
            echo "❌ Root build.gradle not found"
            exit 1
          fi
          
          if [ ! -f "app/build.gradle" ]; then
            echo "❌ App build.gradle not found"
            exit 1
          fi
          
          # Make gradlew executable
          chmod +x gradlew
          
          # Check gradlew
          if [ ! -x "./gradlew" ]; then
            echo "❌ gradlew is not executable"
            exit 1
          fi
          
          echo "✅ All build files are present and accessible"

      - name: 📊 Gradle version check
        run: |
          echo "📊 Gradle Information"
          echo "==================="
          ./gradlew --version --no-daemon || echo "Failed to get Gradle version"

      - name: 🧹 Clean workspace
        run: |
          echo "🧹 Cleaning workspace..."
          ./gradlew clean --no-daemon --stacktrace || echo "Clean failed, continuing..."

      - name: 🔄 Network-aware dependency download
        run: |
          echo "🔄 Downloading dependencies with network awareness..."
          
          # Try to download dependencies with multiple attempts
          for i in {1..5}; do
            echo "Dependency download attempt $i/5..."
            
            # First try with normal timeout
            if timeout 300 ./gradlew dependencies --no-daemon --stacktrace; then
              echo "✅ Dependencies downloaded successfully"
              break
            else
              if [ $i -eq 5 ]; then
                echo "❌ Failed to download dependencies after 5 attempts"
                echo "⚠️ Attempting offline build..."
                break
              fi
              
              echo "⏳ Download failed, waiting 60 seconds before retry..."
              sleep 60
              
              # Clean gradle cache on retry
              rm -rf ~/.gradle/caches/modules-* || true
            fi
          done

      - name: 🛡️ Ultra-safe build process
        run: |
          echo "🛡️ Starting ultra-safe build process..."
          
          # Use the build script we created
          chmod +x build-apk.sh
          ./build-apk.sh ${{ github.event.inputs.build_type }}

      - name: 📊 Build results analysis
        if: always()
        run: |
          echo "📊 Build Results Analysis"
          echo "========================"
          
          # Check what APKs were created
          echo "🔍 Looking for APK files..."
          find . -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK files found"
          
          # Show build outputs directory structure
          echo ""
          echo "📁 Build outputs structure:"
          ls -la app/build/outputs/ 2>/dev/null || echo "No outputs directory found"
          ls -la app/build/outputs/apk/ 2>/dev/null || echo "No APK outputs directory found"
          ls -la app/build/outputs/apk/*/ 2>/dev/null || echo "No APK variant directories found"

      - name: 📦 Package APKs safely
        if: always()
        run: |
          echo "📦 Packaging APKs safely..."
          
          # Create output directory
          mkdir -p ultra_stable_outputs
          
          # Function to copy and verify APK
          copy_and_verify() {
            local src=$1
            local dst=$2
            local type=$3
            
            if [ -f "$src" ]; then
              cp "$src" "$dst"
              
              # Verify the copy
              if [ -f "$dst" ]; then
                echo "✅ $type APK packaged successfully"
                
                # Generate checksums
                cd ultra_stable_outputs
                sha256sum "$(basename $dst)" > "$(basename $dst).sha256"
                md5sum "$(basename $dst)" > "$(basename $dst).md5"
                cd ..
                
                # Show file info
                ls -lh "$dst"
                echo "File type: $(file $dst)"
              else
                echo "❌ Failed to package $type APK"
              fi
            else
              echo "⚠️ $type APK not found at $src"
            fi
          }
          
          # Package debug APK
          copy_and_verify "app/build/outputs/apk/debug/app-debug.apk" "ultra_stable_outputs/SpadeAce-ultra-stable-debug.apk" "debug"
          
          # Package release APK
          copy_and_verify "app/build/outputs/apk/release/app-release.apk" "ultra_stable_outputs/SpadeAce-ultra-stable-release.apk" "release"
          
          # Create build info file
          cat > ultra_stable_outputs/build-info.txt << EOF
          Ultra-Stable APK Builder Results
          ================================
          Build Time: $(date -u)
          Build Type: ${{ github.event.inputs.build_type }}
          Commit: ${{ github.sha }}
          Repository: ${{ github.repository }}
          Workflow Run: ${{ github.run_number }}
          
          Build Environment:
          - OS: $(uname -a)
          - Java: $(java -version 2>&1 | head -1)
          - Gradle: $(./gradlew --version --no-daemon 2>/dev/null | grep '^Gradle' | head -1 || echo "Unknown")
          EOF

      - name: 📤 Upload ultra-stable APKs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: SpadeAce-Ultra-Stable-APKs-${{ github.run_number }}
          path: ultra_stable_outputs/
          retention-days: 90

      - name: 📋 Final status report
        if: always()
        run: |
          echo "# 🛡️ Ultra-Stable APK Builder Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: ${{ github.event.inputs.build_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for APK files
          if ls ultra_stable_outputs/*.apk 1> /dev/null 2>&1; then
            echo "## ✅ Successfully Built APKs:" >> $GITHUB_STEP_SUMMARY
            for apk in ultra_stable_outputs/*.apk; do
              if [ -f "$apk" ]; then
                SIZE=$(stat -c%s "$apk" 2>/dev/null || echo "Unknown")
                echo "- **$(basename $apk)** (${SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "## ❌ No APKs Generated" >> $GITHUB_STEP_SUMMARY
            echo "Check the build logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Built with Ultra-Stable APK Builder*" >> $GITHUB_STEP_SUMMARY