name: 🔄 Fallback APK Builder

# This workflow serves as a fallback when the main stable builder encounters issues
# It uses a more conservative approach with minimal dependencies

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for using fallback builder'
        required: false
        default: 'Main builder issues'
      build_type:
        description: 'Build type'
        required: false
        default: 'both'
        type: choice
        options:
          - debug
          - release
          - both

env:
  # Conservative settings for maximum compatibility
  JAVA_VERSION: '17'
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Xmx2g'

jobs:
  fallback_build:
    name: 🛡️ Fallback Build
    runs-on: ubuntu-20.04  # Using older but more stable version
    timeout-minutes: 60
    
    steps:
      - name: 📥 Checkout (shallow)
        uses: actions/checkout@v3  # Using older stable version
        with:
          fetch-depth: 1

      - name: ☕ Setup JDK (conservative)
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'adopt'

      - name: 🔧 Prepare environment
        run: |
          echo "🔧 Setting up conservative build environment..."
          chmod +x gradlew
          
          # Disable Gradle daemon and configure for single-threaded builds
          echo "org.gradle.daemon=false" >> gradle.properties
          echo "org.gradle.parallel=false" >> gradle.properties
          echo "org.gradle.configureondemand=false" >> gradle.properties
          echo "org.gradle.workers.max=1" >> gradle.properties
          
          # Show environment
          echo "Java: $(java -version 2>&1 | head -1)"
          echo "Gradle wrapper: $(./gradlew --version | head -1)"

      - name: 🧹 Clean build
        run: |
          echo "🧹 Performing clean build..."
          ./gradlew clean --stacktrace --no-daemon

      - name: 🔨 Build Debug APK
        if: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' }}
        run: |
          echo "🔨 Building Debug APK..."
          ./gradlew assembleDebug --stacktrace --no-daemon --offline || ./gradlew assembleDebug --stacktrace --no-daemon

      - name: 🔨 Build Release APK  
        if: ${{ github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' }}
        run: |
          echo "🔨 Building Release APK..."
          ./gradlew assembleRelease --stacktrace --no-daemon --offline || ./gradlew assembleRelease --stacktrace --no-daemon

      - name: 📦 Package APKs
        run: |
          echo "📦 Packaging APKs..."
          mkdir -p fallback_outputs
          
          # Copy debug APK if exists
          if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
            cp app/build/outputs/apk/debug/app-debug.apk fallback_outputs/SpadeAce-fallback-debug.apk
            echo "✅ Debug APK packaged"
          fi
          
          # Copy release APK if exists
          if [ -f app/build/outputs/apk/release/app-release.apk ]; then
            cp app/build/outputs/apk/release/app-release.apk fallback_outputs/SpadeAce-fallback-release.apk
            echo "✅ Release APK packaged"
          fi
          
          # Generate simple checksums
          cd fallback_outputs
          for apk in *.apk; do
            if [ -f "$apk" ]; then
              sha256sum "$apk" > "${apk}.sha256"
              echo "✅ Checksum generated for $apk"
            fi
          done

      - name: 📤 Upload Fallback APKs
        uses: actions/upload-artifact@v3
        with:
          name: SpadeAce-Fallback-APKs
          path: fallback_outputs/
          retention-days: 30

      - name: 📊 Fallback Summary
        run: |
          echo "# 🛡️ Fallback APK Builder Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason for fallback**: ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build completed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          cd fallback_outputs
          if [ -n "$(ls -A .)" ]; then
            echo "## ✅ Generated APKs:" >> $GITHUB_STEP_SUMMARY
            for apk in *.apk; do
              if [ -f "$apk" ]; then
                SIZE=$(stat -c%s "$apk" 2>/dev/null || echo "Unknown")
                echo "- **$apk** (${SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "## ❌ No APKs generated" >> $GITHUB_STEP_SUMMARY
          fi